apply plugin: 'kotlin'
apply plugin: 'application'
apply plugin: 'org.junit.platform.gradle.plugin'
apply plugin: 'maven'
apply plugin: 'maven-publish'

mainClassName = 'com.workday.torque.MainKt'

dependencies {
    compile libraries.kotlinStd
    compile libraries.kotlinReflect
    compile libraries.rxJava
    compile libraries.rxJava2
    compile libraries.rxJava2Interop
    compile libraries.jCommander
    compile libraries.commanderOs
    compile libraries.commanderAndroid
    compile libraries.apacheCommonsIo
    compile libraries.apacheCommonsLang
    compile libraries.gson
    compile libraries.dexParser
    compile libraries.kotlinCoroutines
    compile libraries.kotlinCoroutinesRx2
}

dependencies {
    testImplementation libraries.spek
    testImplementation libraries.junitPlatformRunner
    testImplementation libraries.spekJunitPlatformEngine
    testImplementation libraries.assertJ
    testImplementation libraries.kotlinJunit
    testImplementation libraries.mockk
}

jar {
    // Build jar with dependencies.
    from(configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }) {
        exclude 'META-INF/*.SF'
        exclude 'META-INF/*.DSA'
        exclude 'META-INF/*.RSA'
    }

    manifest {
        attributes('Main-Class': mainClassName)
    }
}

junitPlatform {
    platformVersion = versions.junitPlatform

    filters {
        engines {
            include 'spek'
        }
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task resourcesJar(type: Jar, dependsOn: javadoc) {
    classifier = 'resources'
    from sourceSets.main.resources
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task validatePublishing {
    doLast {
        validateTagAndVersion()
    }
}

publishing {
    publications {
        TorquePublication(MavenPublication) {
            from components.java

            artifact sourcesJar
            artifact javadocJar

            groupId 'com.workday.torque'
            artifactId 'torque'
            version projectVersion()

            pom.withXml {
                def root = asNode()
                root.appendNode('name', 'Torque')
            }
        }
    }
}
